
\renewcommand{\rulehl}[2][gray!40]{%
  \colorbox{#1}{$\displaystyle#2$}}

\section{Syntax and Semantics of \namee}
\label{sec:typesystem}

In this section we formally present the syntax and semantics of \namee. Compared
to previous work~\citep{alpuimdisjoint, oliveira2016disjoint}, \namee has a more
powerful subtyping relation. The new subtyping relation is inspired by BCD
subtyping, but with two noteworthy differences: subtyping is coercive (in
contrast to traditional formulations of BCD); and it is extended with records.
We also have a new target language with explicit coercions inspired by the coercion calculus of
\citet{Henglein_1994}. A full technical comparison between \namee and \oname can be found in \cref{sec:comparision}.

\subsection{Syntax}

\Cref{fig:source} shows the syntax of \namee.
% with the differences from \oname \hll{highlighted}.
% \namee is a simple calculus with intersection types, the merge operator
% and single-field records.
For brevity of the meta-theoretic study, we do not consider primitive operations
on primitive types. They can be easily added to the language, and our prototype
implementation is indeed equipped with common primitive types and their
operations. Metavariables $[[A]], [[B]], [[C]]$ range over types. Types include
integer types $[[int]]$, a top type $[[Top]]$, function types $[[A -> B]]$, intersection
types $[[A & B]]$, and single-field record types $[[ {l : A} ]]$. Metavariable
$[[ee]]$ ranges over expressions. Expressions include variables $[[x]]$,
literals $[[i]]$, a canonical top value $[[Top]]$, lambda abstractions $[[\x .
ee]]$, applications $[[ee1 ee2]]$, merges $[[ee1 ,, ee2]]$, annotated terms
$[[ee : A]]$, single-field records $[[ {l = ee}]]$, and record projections $[[ee.l]]$.

\begin{figure}[t]
  \centering
\begin{tabular}{llll}\toprule
  Types & $[[A]], [[B]], [[C]]$ & $\Coloneqq$ & $[[int]] \mid [[Top]] \mid [[A -> B]]  \mid [[A & B]] \mid [[ { l : A } ]]$ \\
  Expressions & $[[ee]]$ & $\Coloneqq$ & $[[x]] \mid [[i]] \mid [[Top]] \mid [[\x . ee]] \mid [[ee1 ee2]] \mid [[ee1 ,, ee2]] \mid [[ee : A]] \mid [[ { l = ee } ]] \mid [[ee.l]] $ \\
  % & & $\mid$ & $  $ \\
  Term contexts & $[[GG]]$ & $\Coloneqq$ & $[[empty]] \mid [[GG , x : A]]$ \\ \bottomrule
\end{tabular}
  \caption{Syntax of \namee}
  \label{fig:source}
\end{figure}


\subsection{Declarative Subtyping}

\Cref{fig:subtype_decl} presents the subtyping relation. We ignore the
\hll{highlighted} parts, and explain them later in \cref{sec:elaboration}.

\paragraph{BCD-style subtyping.}

The subtyping relation is essentially BCD subtyping~\citep{Barendregt_1983},
extended with subtyping for single-field records.
\Rref{S-top,S-rcd} for top types and record types are straightforward.
\Rref{S-arr} for function subtyping is standard. \Rref{S-andL,S-andR,S-and} for
intersection types axiomatize that $[[A & B]]$ is the greatest lower bound of
$[[A]]$ and $[[B]]$. \Rref{S-distArr} is perhaps the most interesting rule.
This, so-called ``distributivity'' rule, describes the interaction between
the subtyping relations for function types and those for intersection types.
Note that the other direction $[[A1 -> A2 & A3 <: (A1 -> A2) & (A1 -> A3)]]$
and the contravariant distribution $[[ (A1 -> A2) & (A3 -> A2) <: A1 & A3 -> A2 ]]$ are both
derivable from the existing subtyping rules, as shown below:

  \begin{footnotesize}
\begin{mathpar}
  \inferrule*[right=\rref*{S-and}]
  {  \inferrule*[right=\rref*{S-arr}]{ [[ A1 <: A1  ]] \\ [[ A2 & A3 <: A2  ]]  }{[[   A1 -> A2 & A3 <: A1 -> A2  ]]} \\
    \inferrule*[right=\rref*{S-arr}]{ [[ A1 <: A1  ]] \\ [[ A2 & A3 <: A3  ]] }{[[ A1 -> A2 & A3 -> A1 -> A3      ]]}  }
  {  [[ A1 -> A2 & A3 <: (A1 -> A2) & (A1 -> A3)  ]]  }
  \and
    \inferrule*[right=\rref*{S-trans}]
  {  \inferrule*[right=\rref*{S-andL}]{ }{[[ (A1 -> A2) & (A3 -> A2) <: A1 -> A2   ]]} \\
    \inferrule*[right=\rref*{S-arr}]{ [[ A1 & A3 <: A1  ]] \\ [[ A2 <: A2  ]] }{[[ A1 -> A2 <: A1 & A3 -> A2  ]]}  }
  {  [[  (A1 -> A2) & (A3 -> A2) <: A1 & A3 -> A2  ]]   }
\end{mathpar}
  \end{footnotesize}

\noindent \Rref{S-distRcd}, which is not found in the original BCD system,
prescribes the distribution of records over intersection types. The two
distributivity rules are the key to enabling nested composition. \Rref*{S-topArr} is standard in BCD subtyping, and the new
\rref{S-topRcd} plays a similar role for record types.

\begin{figure}[t]
  \centering
  \drules[S]{$[[A <: B ~~> c]]$}{Declarative subtyping}{refl,trans,top,rcd,arr,andL,andR,and,topArr,topRcd,distArr,distRcd}
  \caption{Declarative subtyping of \namee}
  \label{fig:subtype_decl}
\end{figure}


\paragraph{Non-algorithmic.}
The subtyping relation in \cref{fig:subtype_decl} is clearly no more than a
specification due to the two subtyping axioms: \rref{S-refl,S-trans}. A sound
and complete algorithmic version is discussed in \cref{sec:alg}. Nevertheless,
for the sake of establishing coherence, the declarative subtyping relation is
sufficient.


\paragraph{Properties of subtyping.}
The subtyping relation is vacuously \emph{reflexive} and \emph{transitive}.



\subsection{Typing of \namee}



\begin{figure}[t]
  \centering
  \drules[T]{$[[GG  |- ee => A ~~> e]]$}{Inference}{top, lit, var, app, anno, proj, merge, rcd}
  \drules[T]{$[[GG  |- ee <= A ~~> e]]$}{Checking}{abs, sub}
  \caption{Bidirectional type system of \namee}
  \label{fig:type:namee}
\end{figure}

The bidirectional type system for \namee is shown in \cref{fig:type:namee}.
We ignore the \hll{highlighted} parts for now.

\paragraph{Typing rules.}

The typing rules of \namee in \cref{fig:type:namee} are mostly ported from \oname in \cref{fig:lambdai}.
As with traditional bidirectional type systems, we employ two modes: the
inference mode ($[[=>]]$) and the checking mode ($[[<=]]$). The inference
judgment $[[GG |- ee => A]]$ says that we can synthesize a type $[[A]]$ for
expression $[[ee]]$ in the context $[[GG]]$. The checking judgment $[[GG |- ee <= A]]$
checks $[[ee]]$ against $[[A]]$ in the context $[[GG]]$.
Most of the rules are quite standard in the literature.
The merge expression $[[ee1 ,, ee2]]$ is well-typed if both sub-expressions are
well-typed, and their types are \textit{disjoint} (\rref{T-merge}).


\paragraph{Disjointness rules.}

The set of inference rules for disjointness $[[A ** B]]$ is shown in
\cref{fig:disjoint}.
Note that our set of disjointness rules is different from
that in \oname~\citep[Figure~10]{oliveira2016disjoint}: \oname does not have
\rref{D-topL,D-topR}, which first appeared in \fname~\citep[Figure
3]{alpuimdisjoint}.
% The intuition of two types being disjoint is
% that their least upper bound is (isomorphic to) $[[Top]]$.
Disjointness axioms $[[ A **a B ]]$ (appearing in \rref{D-ax}) take
care of two types with different type constructors (e.g., $[[int]]$ and records).
The disjointness relation is helpful to check whether the merge of two
expressions of type $[[A]]$ and $[[B]]$ preserves coherence, e.g., it rule out ambiguous
expressions such as $\mer{1}{2}$ because $[[int]]$ is \emph{not} disjoint to $[[int]]$.


% Most of the typing and disjointness rules are
% standard and are explained in detail in previous
% work~\citep{oliveira2016disjoint, alpuimdisjoint}.
%We refer
%the reader to their papers for further explanation.
% no gray anymore after this point
\renewcommand{\rulehl}[1]{#1}

\begin{figure}[t]
  \centering
  \drules[D]{$[[A ** B]]$}{Disjointness}{topL, topR, arr, andL, andR, rcdEq, rcdNeq,ax}
  \drules[Dax]{$[[A **a B]]$}{Disjointness axioms}{sym, intArr, intRcd,arrRcd}
  \caption{Disjointness}
  \label{fig:disjoint}
\end{figure}

\section{Syntax and Semantics of \tname}
\label{sec:elaboration}



\begin{figure}[t]
  \centering
\begin{tabular}{llll} \toprule
  Types & $[[T]]$ & $\Coloneqq$ & $[[int]] \mid [[Unit]] \mid [[T1 * T2]] \mid [[T1 -> T2]] $ \\
  Terms & $[[e]]$ & $\Coloneqq$ & $[[x]] \mid [[i]] \mid [[unit]] \mid [[\x . e]] \mid [[e1 e2]] \mid [[<e1, e2>]] \mid [[c e]]$ \\
  Coercions & $[[c]]$ & $\Coloneqq$ & $ [[id]] \mid [[c1 o c2]] \mid [[top]] \mid [[c1 -> c2]] \mid [[<c1, c2>]] \mid [[pp1]] \mid [[pp2]] $ \\
  &  &  $\mid$ & $   [[distArr]] \mid [[topArr]]  $ \\
  Values & $[[v]]$ & $\Coloneqq$ & $[[unit]] \mid [[i]] \mid [[\x.e]] \mid  [[<v1, v2>]] \mid [[(c1 -> c2) v]] \mid [[distArr v]] \mid [[topArr v]] $ \\
  Typing contexts & $[[gg]]$ & $\Coloneqq$ & $[[empty]] \mid [[gg , x : T]]$ \\
  Evaluation contexts & $[[EE]]$ & $\Coloneqq$ &  $  [[__]] \mid [[EE e]] \mid [[v EE]] \mid [[ < EE , e >  ]] \mid [[ < v , EE > ]] \mid [[ c EE  ]]$ \\ \bottomrule
\end{tabular}
  \caption{\tname syntax}
  \label{fig:target}
\end{figure}



We elaborate well-typed source expression $[[ee]]$ into target terms $[[e]]$.
Our target language \tname is the standard simply-typed call-by-value lambda
calculus extended with products and coercions. The syntax of \tname is shown in
\cref{fig:target}. The meta-function $| \cdot |$ shown in
\cref{def:type:translate} transforms \namee types to \tname types. It is worth
pointing out that we use the erasure semantics to model record labels, i.e.,
labels are erased during elaboration; this is different from the
original publication~\citep{bi_et_al:LIPIcs:2018:9227} where records are also present in
the target. Both work fine in \namee, but discarding records makes the
target calculus a bit simpler.
% It is equally fine to % keep labels in the target.
The notation $| \cdot |$ is also overloaded for
translating source contexts $[[GG]]$ to target contexts $[[gg]]$.


\begin{definition}[Type translation $|\cdot|$ from \namee to \tname] \label{def:type:translate} \leavevmode
  \begin{center}
\begin{tabular}{lllllll} \toprule
  $| [[int]] |$ &$=$ & $ [[int]]$ &  &   $| [[Top]] |$ & $ = $ & $ \langle  \rangle $ \\
  $| [[A -> B]] |$ &$=$ & $[[ |A| -> |B| ]]$ &  &   $| [[A & B]] |$ & $ = $ & $[[ |A| * |B|    ]]$ \\
  $| [[ {l : A}  ]] |$ &$=$& $[[| A |]]$  \\ \bottomrule
\end{tabular}

  \end{center}
\end{definition}


\subsection{Explicit Coercions and Coercive Subtyping}

The separate syntactic category for \emph{explicit coercions} is a distinctive difference
from the prior work~\citep{oliveira2016disjoint, alpuimdisjoint} (in which they are regular terms). Our coercions are based
on those of \citet{Henglein_1994}, and we add more forms due to our extra
subtyping rules.
Metavariable $[[c]]$ (hence the $[[c]]$ in \tname) ranges over coercions.
As a cognitive aid, we can mentally ``desugar'' coercions to
regular terms, which might help understand the dynamic semantics of coercions. The correspondence
between coercions and terms is shown in \cref{tab:coercion}.
In essence, coercions express the conversion
of a term from one type to another. Because of the addition of coercions, the
grammar contains explicit coercion applications $[[c e]]$ as a term, and various
unsaturated coercion applications as values. The use of explicit coercions is useful for the new semantic
proof of coherence based on logical relations.
The subtyping judgment in \cref{fig:subtype_decl} has the form $[[A <: B ~~> c]]$, which says that
subtyping $[[A <: B]]$ produces a coercion $[[c]]$ that converts
terms of type $[[ |A| ]]$ to type $[[ |B| ]]$. Each subtyping rule has its own
specific form of coercion.


\begin{table}[t]
  \centering
\begin{tabular}{lllll} \toprule
  \textbf{Coercion} & \textbf{Term} & & \textbf{Coercion} & \textbf{Term} \\ \midrule
  $[[id]]$         & $[[ \x . x]]$  & & $[[ c1 o c2  ]]$    &  $[[  \x . c1 (c2 x) ]]$ \\
  $[[top]]$         & $[[ \x . unit ]]$  & & $[[ c1 -> c2  ]]$    &  $[[  \f . \x . c2 (f (c1 x))  ]]$ \\
  $[[  pp1   ]]$         & $[[ \x . pp1 x    ]]$  & & $[[ pp2  ]]$    &  $[[  \x . pp2 x  ]]$ \\
  $[[  < c1 , c2 >   ]]$         & $[[ \x . < c1 x, c2 x >    ]]$  & & $[[ distArr  ]]$    &  $[[  \x . \y . < (pp1 x) y , (pp2 x) y > ]]$ \\
  $[[  topArr   ]]$         & $[[ \x . \ y . unit    ]]$  \\ \bottomrule
\end{tabular}
\caption{Correspondence between coercions and terms}
\label{tab:coercion}
\end{table}

\subsection{Typing of \tname}

The typing of \tname has the form $[[gg |- e : T]]$, and is entirely standard. Only the typing of coercion
applications, shown below, deserves attention:
\begin{mathpar}
\drule{t-capp}
\end{mathpar}
Here the judgment $[[c |- T1 tri T2]]$ expresses the typing of coercions, which
are essentially functions from $[[T1]]$ to $[[T2]]$. Their typing
rules correspond exactly to the subtyping rules of \namee, as
shown in \cref{fig:co}.

\begin{figure}[t]
  \centering
  \drules[ct]{$[[c |- T1 tri T2]]$}{Coercion typing}{refl, trans, top, topArr, arr, pair, projl, projr, distArr}
  \caption{Coercion typing}
  \label{fig:co}
\end{figure}


\subsection{Dynamic Semantics}

\begin{figure}[t]
  \centering
\drules[r]{$[[e --> e']]$}{Single-step reduction}{id, trans, top, topArr, pair, arr, distArr, projl, projr, app, ctxt}
  \caption{Dynamic semantics of \tname}
  \label{fig:coercion_red}
\end{figure}

The dynamic semantics of \tname is shown in \cref{fig:coercion_red}. We write
$[[e --> e']]$ for reduction of expressions. The first three lines are reduction
rules for coercions. They do not contribute to computation but merely rearrange
coercions. Our coercion reduction rules are quite standard but not efficient in
terms of space. Nevertheless, there is existing work on space-efficient
coercions~\citep{Siek_2015, herman2010space}, which should be applicable to our
work as well. \Rref{r-app} is the usual $\beta$-rule that performs actual
computation, and \rref{r-ctxt} handles reduction under an evaluation context. As
standard, $[[-->>]]$ is the reflexive, transitive closure of $[[-->]]$.
Now we can show that \tname is type safe:

\begin{theorem}[\href{https://github.com/bixuanzju/phd-thesis-artifact/blob/master/coq/poly/TargetProperty.v\#L83}{\leftpointright} Preservation] \label{thm:target_preserve} % APPLYCOQ=PRESERVATION
  If $[[empty |- e : T]]$ and $[[e --> e']]$, then $[[empty |- e' : T]]$.
\end{theorem}

\begin{theorem}[\href{https://github.com/bixuanzju/phd-thesis-artifact/blob/master/coq/poly/TargetProperty.v\#L9}{\leftpointright} Progress] \label{thm:target_progress} % APPLYCOQ=PROGRESS
  If $[[empty |- e : T]]$, then either $[[e]]$ is a value, or there exists $[[e']]$ such
  that $[[e --> e']]$.
\end{theorem}


\subsection{Elaboration Semantics}


We are now in a position to explain the elaboration judgments $[[GG |- ee => A ~~> e]]$
and $[[GG |- ee <= A ~~> e]]$ in \cref{fig:type:namee}. The only
interesting rule is \rref{T-sub}, which applies the coercion $[[c]]$ produced by
subtyping to the target term $[[e]]$ to form a coercion application
$[[c e]]$. All the other rules do straightforward translations between
source and target expressions.


To conclude, we show two lemmas that relate source expressions to target terms.
% (Note that in this and subsequent sections, we only provide
% proof sketches for each lemma and theorem. We refer the interested reader
% to our Coq development for the full proofs.)

\begin{lemma}[\href{https://github.com/bixuanzju/phd-thesis-artifact/blob/master/coq/poly/SourceProperty.v\#L8}{\leftpointright} Coercions preserve types]   \label{lemma:sub-correct} % APPLYCOQ=COERCION_TYPES
  If $[[A <: B ~~> c]]$, then $[[c |-  |A| tri |B|]]$.
\end{lemma}
\begin{proof}
  By structural induction on the derivation of subtyping.
\end{proof}


\begin{lemma}[\href{https://github.com/bixuanzju/phd-thesis-artifact/blob/master/coq/poly/SourceProperty.v\#L44}{\leftpointright} Elaboration soundness] \label{thm:elab_safe} % APPLYCOQ=ELABORATION_SOUND
  We have that:
  \begin{itemize}
  \item If $[[GG |- ee => A ~~> e]]$, then $|\Gamma| \vdash e : |A| $.
  \item If $[[GG |- ee <= A ~~> e]]$, then $|\Gamma| \vdash e : |A| $.
  \end{itemize}
\end{lemma}
\begin{proof}
  By structural induction on the derivation of typing.
\end{proof}

As a corollary, \namee is type safe due to \cref{thm:target_preserve,thm:target_progress} and \cref{thm:elab_safe}.



\section{Comparison with \oname}
\label{sec:comparision}

In this section we identify major differences from \oname (cf.
\cref{fig:lambdai}), which, when taken together, yield a simpler and more
elegant system. The differences may seem superficial, but they have a strong
effect on coherence, our major topic in \cref{chap:coherence:simple}.

\paragraph{No ordinary types.}

Apart from the extra subtyping rules, there is an important difference from the
\oname subtyping relation. The subtyping relation of \oname employs an auxiliary
unary relation ``$[[A ord]]$'' (cf. \rref{Si-andL,Si-andR} in
\cref{fig:lambdai}). Ordinary types are employed to ensure determinism of
subtyping (hence uniqueness of the elaboration), which plays a fundamental role
for ensuring coherence and obtaining an algorithm. In \namee, we show that
determinism is too strong of a requirement. As we shall see in
\cref{chap:coherence:simple}, it suffices to base the notion of coherence on
contextual equivalence. As such, the \namee calculus
discards the notion of ordinary types completely; this yields a clean and
elegant formulation of the subtyping relation. Another minor difference is that
due to the addition of the transitivity axiom (\rref{S-trans}),
\rref{S-andL,S-andR} are simplified: an intersection type $[[A1 & A2]]$ is a
subtype of both $[[A1]]$ and $[[A2]]$, instead of the more general form $[[ A1 & A2 <: A3]]$.

% \paragraph{Example}
% The following example shows the derivation tree of the subtyping example
% presented in \cref{sec:overview}. \jeremy{A derivation of the nested composition
%   example? }


\paragraph{No top-like types.}

Another notable difference from the coercive subtyping of \oname is that,
because of the syntactic proof method, they have a special treatment for
coercions of \emph{top-like types} (see the coercion parts in
\rref{Si-andL,Si-andR} in \cref{fig:lambdai}). Top-like types will introduce
non-determinism during subtyping, thus would potentially endanger coherence.
However, as \citet{oliveira2016disjoint} observed, any coercions for top-like
types are unique, even if multiple derivations exist. For \namee, as with
ordinary types, we do not need this kind of ad-hoc treatment; for subtyping
purposes, top-like types are handled like all other types. However, as we shall
see in \cref{chap:fi}, top-like types are useful in the disjointness relation
when we add the bottom type.

% thanks to the adoption of a more powerful proof method (cf. \cref{chap:coherence:simple}).


\paragraph{No well-formedness judgment.}

A key difference from the type system of \oname is the complete omission of the
well-formedness judgment $[[GG |- A]]$, which appears in \rref{Ti-abs} (our
\rref{T-abs}) and \rref{Ti-sub} (our \rref{T-sub}). The sole purpose of this
judgment is to ensure that all intersection types are disjoint. However, as
\cref{chap:coherence:simple} will explain, this is
unnecessary for coherence, and merely complicates the type system. Thus \namee
discards this well-formedness judgment altogether in favor of a simpler design
that is still coherent. As a consequence, \namee supports \emph{unrestricted
intersection types}, and already subsumes \oname even without BCD
subtyping: an expression such as $1 : [[int & int]]$ is accepted in \namee but
rejected in \oname. This simplification is based on an important observation:
incoherence can only arise from merges. Therefore disjointness checking is
only necessary in \rref{T-merge}.


% Local Variables:
% TeX-master: "../../Thesis"
% org-ref-default-bibliography: "../../Thesis.bib"
% End:
